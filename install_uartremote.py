import ubinascii, uos, machine,uhashlib
from ubinascii import hexlify
b64="""
"""

def calc_hash(b):
    return hexlify(uhashlib.sha256(b).digest()).decode()

# this is the hash of the compiled uartremote.mpy
hash_gen='13cab9bff9ce7c1eb4639c5807b14c98ea0c228a6f4e1284d6ae127ead603fac'

uartremote=ubinascii.a2b_base64(b64)
hash_initial=calc_hash(uartremote)

with open('/projects/uartremote.mpy','wb') as f:
    f.write(uartremote)
uartremote_check=open('/projects/uartremote.mpy','rb').read()
hash_check=calc_hash(uartremote_check)

error=False
if hash_initial != hash_gen:
    error=True
if hash_check != hash_gen:
    error=True

if not error:
    print('Uartremote library written succesfully')
else:
    print('Failure in Uartremote library!')
